server:
  port: 8080

spring:
  application:
    name: well-plate
  profiles:
    active: default
  datasource:
    driver-class-name: org.postgresql.Driver
    url: "jdbc:${rdb.engine}://${rdb.host}:${rdb.port}/${rdb.dbname}"
    username: "${rdb.username}"
    password: "${rdb.password}"
#    connectionTestQuery: "SELECT 1"
    hikari:
      maximum-pool-size: 15
      minimum-idle: 15
      connection-timeout: 5000
      validation-timeout: 2000
  jpa:
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
#      ddl-auto: update
      ddl-auto: validate # create disabled: schema has been managed by flyway on docker-compose
    properties:
      hibernate:
        default_schema: public # event테이블 public 에서 찾도록 명시
      format_sql: true
      show-sql:
        use_sql_comments: ${logging.default-show-sql}
        use_jdbc_metadata_defaults: ${logging.default-show-sql}
  flyway:
    enabled: true
    create-schemas: true
    baseline-on-migrate: true
    baseline-version: 0
    out-of-order: true
    default-schema: public # flyway public 스키마를 사용
  docker:
    compose:
      enabled: true


logging:
  pattern:
    correlation: "[%X{traceId:-} %X{spanId:-}] "
  level:
    root: ${logging.default-level}
    io: ${logging.default-level}
    jdk: ${logging.default-level}
    com: ${logging.default-level}
    org: ${logging.default-level}
management:
  endpoints:
    web:
      exposure:
        include: health


---
spring:
  config:
    activate:
      on-profile: local
    import:
      - classpath:parameters/logging/logging.yml
      - classpath:parameters/db/db.yml
      - classpath:parameters/jwt/jwt.yml
application:
  security:
    jwt:
      secret-key: ${jwt.secret-key}
      expiration: ${jwt.expiration}
      refresh-token:
        expiration: ${jwt.refresh-token.expiration}

---
spring:
  config:
    activate:
      on-profile: dev
    import:
      - classpath:parameters/dev/logging/logging.yml
      - classpath:parameters/dev/db/db.yml
      - classpath:parameters/dev/jwt/jwt.yml
application:
  security:
    jwt:
      secret-key: ${jwt.secret-key}
      expiration: ${jwt.expiration}
      refresh-token:
        expiration: ${jwt.refresh-token.expiration}
